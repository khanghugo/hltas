/* automatically generated by rust-bindgen 0.71.1 */

unsafe extern "C" {
    pub fn hltas_input_set_property(
        input: *mut ::std::os::raw::c_void,
        property: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn hltas_input_get_property(
        input: *const ::std::os::raw::c_void,
        property: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn hltas_input_push_frame(input: *mut ::std::os::raw::c_void, frame: *const hltas_frame);
}
unsafe extern "C" {
    pub fn hltas_input_get_frame(
        input: *const ::std::os::raw::c_void,
        index: usize,
        frame: *mut hltas_frame,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn hltas_input_set_error_message(
        input: *mut ::std::os::raw::c_void,
        message: *const ::std::os::raw::c_char,
    );
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ErrorCode {
    OK = 0,
    FAILOPEN = 1,
    FAILVER = 2,
    NOTSUPPORTED = 3,
    FAILLINE = 4,
    NOSAVENAME = 5,
    FAILFRAME = 6,
    FAILWRITE = 7,
    NOSEED = 8,
    NOYAW = 9,
    NOBUTTONS = 10,
    BOTHAJDT = 11,
    NOLGAGSTACTION = 12,
    NOLGAGSTMINSPEED = 13,
    LGAGSTACTIONTIMES = 14,
    NORESETSEED = 15,
    INVALID_ALGORITHM = 16,
    MISSING_CONSTRAINTS = 17,
    NO_PM_IN_TOLERANCE = 18,
    MISSING_ALGORITHM_FROMTO_PARAMETERS = 19,
    NO_TO_IN_FROMTO_ALGORITHM = 20,
    NO_YAWSPEED = 21,
    UNSUPPORTED_YAWSPEED_DIR = 22,
    NEGATIVE_YAWSPEED_VALUE = 23,
    NO_YAW_OFFSET = 24,
    NO_YAW_OFFSET_ACCELERATION = 25,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ErrorDescription {
    pub Code: ErrorCode,
    pub LineNumber: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ErrorDescription"][::std::mem::size_of::<ErrorDescription>() - 8usize];
    ["Alignment of ErrorDescription"][::std::mem::align_of::<ErrorDescription>() - 4usize];
    ["Offset of field: ErrorDescription::Code"]
        [::std::mem::offset_of!(ErrorDescription, Code) - 0usize];
    ["Offset of field: ErrorDescription::LineNumber"]
        [::std::mem::offset_of!(ErrorDescription, LineNumber) - 4usize];
};
#[repr(u8)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum StrafeType {
    MAXACCEL = 0,
    MAXANGLE = 1,
    MAXDECCEL = 2,
    CONSTSPEED = 3,
    CONSTYAWSPEED = 4,
    MAXACCELYAWOFFSET = 5,
}
#[repr(u8)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum StrafeDir {
    LEFT = 0,
    RIGHT = 1,
    BEST = 2,
    YAW = 3,
    POINT = 4,
    LINE = 5,
    LEFT_RIGHT = 6,
    RIGHT_LEFT = 7,
}
#[repr(u8)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ButtonState {
    NOTHING = 0,
    SET = 1,
    CLEAR = 2,
}
#[repr(u8)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Button {
    FORWARD = 0,
    FORWARD_LEFT = 1,
    LEFT = 2,
    BACK_LEFT = 3,
    BACK = 4,
    BACK_RIGHT = 5,
    RIGHT = 6,
    FORWARD_RIGHT = 7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StrafeButtons {
    pub AirLeft: Button,
    pub AirRight: Button,
    pub GroundLeft: Button,
    pub GroundRight: Button,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StrafeButtons"][::std::mem::size_of::<StrafeButtons>() - 4usize];
    ["Alignment of StrafeButtons"][::std::mem::align_of::<StrafeButtons>() - 1usize];
    ["Offset of field: StrafeButtons::AirLeft"]
        [::std::mem::offset_of!(StrafeButtons, AirLeft) - 0usize];
    ["Offset of field: StrafeButtons::AirRight"]
        [::std::mem::offset_of!(StrafeButtons, AirRight) - 1usize];
    ["Offset of field: StrafeButtons::GroundLeft"]
        [::std::mem::offset_of!(StrafeButtons, GroundLeft) - 2usize];
    ["Offset of field: StrafeButtons::GroundRight"]
        [::std::mem::offset_of!(StrafeButtons, GroundRight) - 3usize];
};
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum StrafingAlgorithm {
    YAW = 0,
    VECTORIAL = 1,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ConstraintsType {
    VELOCITY = 0,
    VELOCITY_AVG = 1,
    VELOCITY_LOCK = 2,
    YAW = 3,
    YAW_RANGE = 4,
    LOOK_AT = 5,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlgorithmParameters {
    pub Type: ConstraintsType,
    pub Parameters: AlgorithmParameters__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union AlgorithmParameters__bindgen_ty_1 {
    pub Velocity: AlgorithmParameters__bindgen_ty_1__bindgen_ty_1,
    pub VelocityAvg: AlgorithmParameters__bindgen_ty_1__bindgen_ty_2,
    pub VelocityLock: AlgorithmParameters__bindgen_ty_1__bindgen_ty_3,
    pub Yaw: AlgorithmParameters__bindgen_ty_1__bindgen_ty_4,
    pub YawRange: AlgorithmParameters__bindgen_ty_1__bindgen_ty_5,
    pub LookAt: AlgorithmParameters__bindgen_ty_1__bindgen_ty_6,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlgorithmParameters__bindgen_ty_1__bindgen_ty_1 {
    pub Constraints: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AlgorithmParameters__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<AlgorithmParameters__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of AlgorithmParameters__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<AlgorithmParameters__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: AlgorithmParameters__bindgen_ty_1__bindgen_ty_1::Constraints"][::std::mem::offset_of!(
        AlgorithmParameters__bindgen_ty_1__bindgen_ty_1,
        Constraints
    ) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlgorithmParameters__bindgen_ty_1__bindgen_ty_2 {
    pub Constraints: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AlgorithmParameters__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<AlgorithmParameters__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Alignment of AlgorithmParameters__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<AlgorithmParameters__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: AlgorithmParameters__bindgen_ty_1__bindgen_ty_2::Constraints"][::std::mem::offset_of!(
        AlgorithmParameters__bindgen_ty_1__bindgen_ty_2,
        Constraints
    ) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlgorithmParameters__bindgen_ty_1__bindgen_ty_3 {
    pub Constraints: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AlgorithmParameters__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<AlgorithmParameters__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Alignment of AlgorithmParameters__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<AlgorithmParameters__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: AlgorithmParameters__bindgen_ty_1__bindgen_ty_3::Constraints"][::std::mem::offset_of!(
        AlgorithmParameters__bindgen_ty_1__bindgen_ty_3,
        Constraints
    ) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlgorithmParameters__bindgen_ty_1__bindgen_ty_4 {
    pub Yaw: f64,
    pub Constraints: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AlgorithmParameters__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<AlgorithmParameters__bindgen_ty_1__bindgen_ty_4>() - 16usize];
    ["Alignment of AlgorithmParameters__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<AlgorithmParameters__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: AlgorithmParameters__bindgen_ty_1__bindgen_ty_4::Yaw"]
        [::std::mem::offset_of!(AlgorithmParameters__bindgen_ty_1__bindgen_ty_4, Yaw) - 0usize];
    ["Offset of field: AlgorithmParameters__bindgen_ty_1__bindgen_ty_4::Constraints"][::std::mem::offset_of!(
        AlgorithmParameters__bindgen_ty_1__bindgen_ty_4,
        Constraints
    ) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlgorithmParameters__bindgen_ty_1__bindgen_ty_5 {
    pub LowestYaw: f64,
    pub HighestYaw: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AlgorithmParameters__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::size_of::<AlgorithmParameters__bindgen_ty_1__bindgen_ty_5>() - 16usize];
    ["Alignment of AlgorithmParameters__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::align_of::<AlgorithmParameters__bindgen_ty_1__bindgen_ty_5>() - 8usize];
    ["Offset of field: AlgorithmParameters__bindgen_ty_1__bindgen_ty_5::LowestYaw"][::std::mem::offset_of!(
        AlgorithmParameters__bindgen_ty_1__bindgen_ty_5,
        LowestYaw
    ) - 0usize];
    ["Offset of field: AlgorithmParameters__bindgen_ty_1__bindgen_ty_5::HighestYaw"][::std::mem::offset_of!(
        AlgorithmParameters__bindgen_ty_1__bindgen_ty_5,
        HighestYaw
    ) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlgorithmParameters__bindgen_ty_1__bindgen_ty_6 {
    pub Entity: ::std::os::raw::c_uint,
    pub X: f64,
    pub Y: f64,
    pub Z: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AlgorithmParameters__bindgen_ty_1__bindgen_ty_6"]
        [::std::mem::size_of::<AlgorithmParameters__bindgen_ty_1__bindgen_ty_6>() - 32usize];
    ["Alignment of AlgorithmParameters__bindgen_ty_1__bindgen_ty_6"]
        [::std::mem::align_of::<AlgorithmParameters__bindgen_ty_1__bindgen_ty_6>() - 8usize];
    ["Offset of field: AlgorithmParameters__bindgen_ty_1__bindgen_ty_6::Entity"]
        [::std::mem::offset_of!(AlgorithmParameters__bindgen_ty_1__bindgen_ty_6, Entity) - 0usize];
    ["Offset of field: AlgorithmParameters__bindgen_ty_1__bindgen_ty_6::X"]
        [::std::mem::offset_of!(AlgorithmParameters__bindgen_ty_1__bindgen_ty_6, X) - 8usize];
    ["Offset of field: AlgorithmParameters__bindgen_ty_1__bindgen_ty_6::Y"]
        [::std::mem::offset_of!(AlgorithmParameters__bindgen_ty_1__bindgen_ty_6, Y) - 16usize];
    ["Offset of field: AlgorithmParameters__bindgen_ty_1__bindgen_ty_6::Z"]
        [::std::mem::offset_of!(AlgorithmParameters__bindgen_ty_1__bindgen_ty_6, Z) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AlgorithmParameters__bindgen_ty_1"]
        [::std::mem::size_of::<AlgorithmParameters__bindgen_ty_1>() - 32usize];
    ["Alignment of AlgorithmParameters__bindgen_ty_1"]
        [::std::mem::align_of::<AlgorithmParameters__bindgen_ty_1>() - 8usize];
    ["Offset of field: AlgorithmParameters__bindgen_ty_1::Velocity"]
        [::std::mem::offset_of!(AlgorithmParameters__bindgen_ty_1, Velocity) - 0usize];
    ["Offset of field: AlgorithmParameters__bindgen_ty_1::VelocityAvg"]
        [::std::mem::offset_of!(AlgorithmParameters__bindgen_ty_1, VelocityAvg) - 0usize];
    ["Offset of field: AlgorithmParameters__bindgen_ty_1::VelocityLock"]
        [::std::mem::offset_of!(AlgorithmParameters__bindgen_ty_1, VelocityLock) - 0usize];
    ["Offset of field: AlgorithmParameters__bindgen_ty_1::Yaw"]
        [::std::mem::offset_of!(AlgorithmParameters__bindgen_ty_1, Yaw) - 0usize];
    ["Offset of field: AlgorithmParameters__bindgen_ty_1::YawRange"]
        [::std::mem::offset_of!(AlgorithmParameters__bindgen_ty_1, YawRange) - 0usize];
    ["Offset of field: AlgorithmParameters__bindgen_ty_1::LookAt"]
        [::std::mem::offset_of!(AlgorithmParameters__bindgen_ty_1, LookAt) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AlgorithmParameters"][::std::mem::size_of::<AlgorithmParameters>() - 40usize];
    ["Alignment of AlgorithmParameters"][::std::mem::align_of::<AlgorithmParameters>() - 8usize];
    ["Offset of field: AlgorithmParameters::Type"]
        [::std::mem::offset_of!(AlgorithmParameters, Type) - 0usize];
    ["Offset of field: AlgorithmParameters::Parameters"]
        [::std::mem::offset_of!(AlgorithmParameters, Parameters) - 8usize];
};
#[repr(u8)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ChangeTarget {
    YAW = 0,
    PITCH = 1,
    TARGET_YAW = 2,
    TARGET_YAW_OFFSET = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hltas_frame {
    pub Strafe: bool,
    pub Lgagst: bool,
    pub Autojump: bool,
    pub Ducktap: bool,
    pub Jumpbug: bool,
    pub Dbc: bool,
    pub Dbg: bool,
    pub Dwj: bool,
    pub Type: StrafeType,
    pub Dir: StrafeDir,
    pub LgagstFullMaxspeed: bool,
    pub LgagstTimes: u32,
    pub AutojumpTimes: u32,
    pub Ducktap0ms: bool,
    pub DucktapTimes: u32,
    pub JumpbugTimes: u32,
    pub DbcCeilings: bool,
    pub DbcTimes: u32,
    pub DbgTimes: u32,
    pub DwjTimes: u32,
    pub Forward: bool,
    pub Left: bool,
    pub Right: bool,
    pub Back: bool,
    pub Up: bool,
    pub Down: bool,
    pub Jump: bool,
    pub Duck: bool,
    pub Use: bool,
    pub Attack1: bool,
    pub Attack2: bool,
    pub Reload: bool,
    pub Frametime: *const ::std::os::raw::c_char,
    pub PitchPresent: bool,
    pub YawPresent: bool,
    pub Yaw: f64,
    pub X: f64,
    pub Y: f64,
    pub Count: ::std::os::raw::c_uint,
    pub Yawspeed: f64,
    pub StartYawOffset: f64,
    pub TargetYawOffset: f64,
    pub Acceleration: f64,
    pub Pitch: f64,
    pub Repeats: u32,
    pub Commands: *const ::std::os::raw::c_char,
    pub Comments: *const ::std::os::raw::c_char,
    pub SaveName: *const ::std::os::raw::c_char,
    pub SeedPresent: bool,
    pub Seed: u32,
    pub BtnState: ButtonState,
    pub Buttons: StrafeButtons,
    pub LgagstMinSpeedPresent: bool,
    pub LgagstMinSpeed: f32,
    pub ResetFrame: bool,
    pub ResetNonSharedRNGSeed: i64,
    pub StrafingAlgorithmPresent: bool,
    pub Algorithm: StrafingAlgorithm,
    pub AlgorithmParametersPresent: bool,
    pub Parameters: AlgorithmParameters,
    pub ChangePresent: bool,
    pub Target: ChangeTarget,
    pub ChangeFinalValue: f32,
    pub ChangeOver: f32,
    pub TargetYawOverride: *const f32,
    pub TargetYawOverrideCount: usize,
    pub RenderYawOverride: *const f32,
    pub RenderYawOverrideCount: usize,
    pub PitchOverride: *const f32,
    pub PitchOverrideCount: usize,
    pub RenderPitchOverride: *const f32,
    pub RenderPitchOverrideCount: usize,
    pub IgnoreSmoothing: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hltas_frame"][::std::mem::size_of::<hltas_frame>() - 296usize];
    ["Alignment of hltas_frame"][::std::mem::align_of::<hltas_frame>() - 8usize];
    ["Offset of field: hltas_frame::Strafe"][::std::mem::offset_of!(hltas_frame, Strafe) - 0usize];
    ["Offset of field: hltas_frame::Lgagst"][::std::mem::offset_of!(hltas_frame, Lgagst) - 1usize];
    ["Offset of field: hltas_frame::Autojump"]
        [::std::mem::offset_of!(hltas_frame, Autojump) - 2usize];
    ["Offset of field: hltas_frame::Ducktap"]
        [::std::mem::offset_of!(hltas_frame, Ducktap) - 3usize];
    ["Offset of field: hltas_frame::Jumpbug"]
        [::std::mem::offset_of!(hltas_frame, Jumpbug) - 4usize];
    ["Offset of field: hltas_frame::Dbc"][::std::mem::offset_of!(hltas_frame, Dbc) - 5usize];
    ["Offset of field: hltas_frame::Dbg"][::std::mem::offset_of!(hltas_frame, Dbg) - 6usize];
    ["Offset of field: hltas_frame::Dwj"][::std::mem::offset_of!(hltas_frame, Dwj) - 7usize];
    ["Offset of field: hltas_frame::Type"][::std::mem::offset_of!(hltas_frame, Type) - 8usize];
    ["Offset of field: hltas_frame::Dir"][::std::mem::offset_of!(hltas_frame, Dir) - 9usize];
    ["Offset of field: hltas_frame::LgagstFullMaxspeed"]
        [::std::mem::offset_of!(hltas_frame, LgagstFullMaxspeed) - 10usize];
    ["Offset of field: hltas_frame::LgagstTimes"]
        [::std::mem::offset_of!(hltas_frame, LgagstTimes) - 12usize];
    ["Offset of field: hltas_frame::AutojumpTimes"]
        [::std::mem::offset_of!(hltas_frame, AutojumpTimes) - 16usize];
    ["Offset of field: hltas_frame::Ducktap0ms"]
        [::std::mem::offset_of!(hltas_frame, Ducktap0ms) - 20usize];
    ["Offset of field: hltas_frame::DucktapTimes"]
        [::std::mem::offset_of!(hltas_frame, DucktapTimes) - 24usize];
    ["Offset of field: hltas_frame::JumpbugTimes"]
        [::std::mem::offset_of!(hltas_frame, JumpbugTimes) - 28usize];
    ["Offset of field: hltas_frame::DbcCeilings"]
        [::std::mem::offset_of!(hltas_frame, DbcCeilings) - 32usize];
    ["Offset of field: hltas_frame::DbcTimes"]
        [::std::mem::offset_of!(hltas_frame, DbcTimes) - 36usize];
    ["Offset of field: hltas_frame::DbgTimes"]
        [::std::mem::offset_of!(hltas_frame, DbgTimes) - 40usize];
    ["Offset of field: hltas_frame::DwjTimes"]
        [::std::mem::offset_of!(hltas_frame, DwjTimes) - 44usize];
    ["Offset of field: hltas_frame::Forward"]
        [::std::mem::offset_of!(hltas_frame, Forward) - 48usize];
    ["Offset of field: hltas_frame::Left"][::std::mem::offset_of!(hltas_frame, Left) - 49usize];
    ["Offset of field: hltas_frame::Right"][::std::mem::offset_of!(hltas_frame, Right) - 50usize];
    ["Offset of field: hltas_frame::Back"][::std::mem::offset_of!(hltas_frame, Back) - 51usize];
    ["Offset of field: hltas_frame::Up"][::std::mem::offset_of!(hltas_frame, Up) - 52usize];
    ["Offset of field: hltas_frame::Down"][::std::mem::offset_of!(hltas_frame, Down) - 53usize];
    ["Offset of field: hltas_frame::Jump"][::std::mem::offset_of!(hltas_frame, Jump) - 54usize];
    ["Offset of field: hltas_frame::Duck"][::std::mem::offset_of!(hltas_frame, Duck) - 55usize];
    ["Offset of field: hltas_frame::Use"][::std::mem::offset_of!(hltas_frame, Use) - 56usize];
    ["Offset of field: hltas_frame::Attack1"]
        [::std::mem::offset_of!(hltas_frame, Attack1) - 57usize];
    ["Offset of field: hltas_frame::Attack2"]
        [::std::mem::offset_of!(hltas_frame, Attack2) - 58usize];
    ["Offset of field: hltas_frame::Reload"][::std::mem::offset_of!(hltas_frame, Reload) - 59usize];
    ["Offset of field: hltas_frame::Frametime"]
        [::std::mem::offset_of!(hltas_frame, Frametime) - 60usize];
    ["Offset of field: hltas_frame::PitchPresent"]
        [::std::mem::offset_of!(hltas_frame, PitchPresent) - 64usize];
    ["Offset of field: hltas_frame::YawPresent"]
        [::std::mem::offset_of!(hltas_frame, YawPresent) - 65usize];
    ["Offset of field: hltas_frame::Yaw"][::std::mem::offset_of!(hltas_frame, Yaw) - 72usize];
    ["Offset of field: hltas_frame::X"][::std::mem::offset_of!(hltas_frame, X) - 80usize];
    ["Offset of field: hltas_frame::Y"][::std::mem::offset_of!(hltas_frame, Y) - 88usize];
    ["Offset of field: hltas_frame::Count"][::std::mem::offset_of!(hltas_frame, Count) - 96usize];
    ["Offset of field: hltas_frame::Yawspeed"]
        [::std::mem::offset_of!(hltas_frame, Yawspeed) - 104usize];
    ["Offset of field: hltas_frame::StartYawOffset"]
        [::std::mem::offset_of!(hltas_frame, StartYawOffset) - 112usize];
    ["Offset of field: hltas_frame::TargetYawOffset"]
        [::std::mem::offset_of!(hltas_frame, TargetYawOffset) - 120usize];
    ["Offset of field: hltas_frame::Acceleration"]
        [::std::mem::offset_of!(hltas_frame, Acceleration) - 128usize];
    ["Offset of field: hltas_frame::Pitch"][::std::mem::offset_of!(hltas_frame, Pitch) - 136usize];
    ["Offset of field: hltas_frame::Repeats"]
        [::std::mem::offset_of!(hltas_frame, Repeats) - 144usize];
    ["Offset of field: hltas_frame::Commands"]
        [::std::mem::offset_of!(hltas_frame, Commands) - 148usize];
    ["Offset of field: hltas_frame::Comments"]
        [::std::mem::offset_of!(hltas_frame, Comments) - 152usize];
    ["Offset of field: hltas_frame::SaveName"]
        [::std::mem::offset_of!(hltas_frame, SaveName) - 156usize];
    ["Offset of field: hltas_frame::SeedPresent"]
        [::std::mem::offset_of!(hltas_frame, SeedPresent) - 160usize];
    ["Offset of field: hltas_frame::Seed"][::std::mem::offset_of!(hltas_frame, Seed) - 164usize];
    ["Offset of field: hltas_frame::BtnState"]
        [::std::mem::offset_of!(hltas_frame, BtnState) - 168usize];
    ["Offset of field: hltas_frame::Buttons"]
        [::std::mem::offset_of!(hltas_frame, Buttons) - 169usize];
    ["Offset of field: hltas_frame::LgagstMinSpeedPresent"]
        [::std::mem::offset_of!(hltas_frame, LgagstMinSpeedPresent) - 173usize];
    ["Offset of field: hltas_frame::LgagstMinSpeed"]
        [::std::mem::offset_of!(hltas_frame, LgagstMinSpeed) - 176usize];
    ["Offset of field: hltas_frame::ResetFrame"]
        [::std::mem::offset_of!(hltas_frame, ResetFrame) - 180usize];
    ["Offset of field: hltas_frame::ResetNonSharedRNGSeed"]
        [::std::mem::offset_of!(hltas_frame, ResetNonSharedRNGSeed) - 184usize];
    ["Offset of field: hltas_frame::StrafingAlgorithmPresent"]
        [::std::mem::offset_of!(hltas_frame, StrafingAlgorithmPresent) - 192usize];
    ["Offset of field: hltas_frame::Algorithm"]
        [::std::mem::offset_of!(hltas_frame, Algorithm) - 196usize];
    ["Offset of field: hltas_frame::AlgorithmParametersPresent"]
        [::std::mem::offset_of!(hltas_frame, AlgorithmParametersPresent) - 200usize];
    ["Offset of field: hltas_frame::Parameters"]
        [::std::mem::offset_of!(hltas_frame, Parameters) - 208usize];
    ["Offset of field: hltas_frame::ChangePresent"]
        [::std::mem::offset_of!(hltas_frame, ChangePresent) - 248usize];
    ["Offset of field: hltas_frame::Target"]
        [::std::mem::offset_of!(hltas_frame, Target) - 249usize];
    ["Offset of field: hltas_frame::ChangeFinalValue"]
        [::std::mem::offset_of!(hltas_frame, ChangeFinalValue) - 252usize];
    ["Offset of field: hltas_frame::ChangeOver"]
        [::std::mem::offset_of!(hltas_frame, ChangeOver) - 256usize];
    ["Offset of field: hltas_frame::TargetYawOverride"]
        [::std::mem::offset_of!(hltas_frame, TargetYawOverride) - 260usize];
    ["Offset of field: hltas_frame::TargetYawOverrideCount"]
        [::std::mem::offset_of!(hltas_frame, TargetYawOverrideCount) - 264usize];
    ["Offset of field: hltas_frame::RenderYawOverride"]
        [::std::mem::offset_of!(hltas_frame, RenderYawOverride) - 268usize];
    ["Offset of field: hltas_frame::RenderYawOverrideCount"]
        [::std::mem::offset_of!(hltas_frame, RenderYawOverrideCount) - 272usize];
    ["Offset of field: hltas_frame::PitchOverride"]
        [::std::mem::offset_of!(hltas_frame, PitchOverride) - 276usize];
    ["Offset of field: hltas_frame::PitchOverrideCount"]
        [::std::mem::offset_of!(hltas_frame, PitchOverrideCount) - 280usize];
    ["Offset of field: hltas_frame::RenderPitchOverride"]
        [::std::mem::offset_of!(hltas_frame, RenderPitchOverride) - 284usize];
    ["Offset of field: hltas_frame::RenderPitchOverrideCount"]
        [::std::mem::offset_of!(hltas_frame, RenderPitchOverrideCount) - 288usize];
    ["Offset of field: hltas_frame::IgnoreSmoothing"]
        [::std::mem::offset_of!(hltas_frame, IgnoreSmoothing) - 292usize];
};
